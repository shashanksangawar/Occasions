// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "user_details",
    columns: [
      { name: "Username", type: "string", unique: true },
      {
        name: "HashedPassword",
        type: "text",
        notNull: true,
        defaultValue: "occasions",
      },
      { name: "Email", type: "email", unique: true },
      {
        name: "SaltPassword",
        type: "text",
        notNull: true,
        defaultValue: "Appniche_Occasions",
      },
    ],
    revLinks: [{ column: "User_Id", table: "user_address" }],
  },
  {
    name: "user_address",
    columns: [
      { name: "User_Id", type: "link", link: { table: "user_details" } },
      {
        name: "Apartment",
        type: "string",
        notNull: true,
        defaultValue: "Apartment",
      },
      { name: "Road", type: "string", notNull: true, defaultValue: "Road" },
      {
        name: "Landmark",
        type: "string",
        notNull: true,
        defaultValue: "Landmark",
      },
      { name: "City", type: "string", notNull: true, defaultValue: "City" },
      {
        name: "Country",
        type: "string",
        notNull: true,
        defaultValue: "Country",
      },
      {
        name: "ZipCode",
        type: "string",
        notNull: true,
        defaultValue: "Zip Code",
      },
      {
        name: "AddressType",
        type: "string",
        notNull: true,
        defaultValue: "Active",
      },
      {
        name: "Room",
        type: "string",
        notNull: true,
        defaultValue: "Block No. 101",
      },
      {
        name: "State",
        type: "string",
        notNull: true,
        defaultValue: "Maharashtra",
      },
    ],
  },
  {
    name: "product_details",
    columns: [
      { name: "Category", type: "string", notNull: true, defaultValue: "Male" },
      {
        name: "SubCategory",
        type: "string",
        notNull: true,
        defaultValue: "Marriage Anniversary",
      },
      {
        name: "Title",
        type: "string",
        notNull: true,
        defaultValue: "Occasion Product 1",
      },
      {
        name: "Description",
        type: "text",
        notNull: true,
        defaultValue: "Description of the product.",
      },
      { name: "Ratings", type: "string", notNull: true, defaultValue: "5" },
      {
        name: "ProductImages",
        type: "file[]",
        "file[]": { defaultPublicAccess: true },
      },
      {
        name: "ExperienceVideo",
        type: "file[]",
        "file[]": { defaultPublicAccess: true },
      },
      { name: "Price", type: "string", notNull: true, defaultValue: "10000" },
      { name: "Features", type: "multiple" },
      {
        name: "AboutProduct",
        type: "text",
        notNull: true,
        defaultValue: "About the Product",
      },
      { name: "Quantity", type: "int", notNull: true, defaultValue: "0" },
    ],
  },
  { name: "order_bookings", columns: [] },
  { name: "cart_bookings", columns: [] },
  { name: "user_reviews", columns: [] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type UserDetails = InferredTypes["user_details"];
export type UserDetailsRecord = UserDetails & XataRecord;

export type UserAddress = InferredTypes["user_address"];
export type UserAddressRecord = UserAddress & XataRecord;

export type ProductDetails = InferredTypes["product_details"];
export type ProductDetailsRecord = ProductDetails & XataRecord;

export type OrderBookings = InferredTypes["order_bookings"];
export type OrderBookingsRecord = OrderBookings & XataRecord;

export type CartBookings = InferredTypes["cart_bookings"];
export type CartBookingsRecord = CartBookings & XataRecord;

export type UserReviews = InferredTypes["user_reviews"];
export type UserReviewsRecord = UserReviews & XataRecord;

export type DatabaseSchema = {
  user_details: UserDetailsRecord;
  user_address: UserAddressRecord;
  product_details: ProductDetailsRecord;
  order_bookings: OrderBookingsRecord;
  cart_bookings: CartBookingsRecord;
  user_reviews: UserReviewsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Appniche-s-workspace-uqsalv.us-east-1.xata.sh/db/Occasions",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
